 function Abs(e: Extended): Extended;
 procedure AddAStarObstacleCircle(xc: Double; yc: Double; r: Double);
 procedure AddAStarObstacleRect(xi: Double; yi: Double; xf: Double; yf: Double);
 procedure AddAxisTrajPoint(R: LongInt; i: LongInt; LP: TAxisPoint);
 procedure AddTrailNode(T: LongInt; x: Double; y: Double; z: Double);
 function AnsiLowercase(s: String): String;
 function AnsiUppercase(s: String): String;
 function arccos(x: Extended): Extended;
 function arcsin(x: Extended): Extended;
 function Assigned(I: LongInt): Boolean;
 function ATan2(y: Double; x: Double): Double;
 procedure CalcAStarPath();
 procedure ClearAStarMap();
 procedure ClearAxisTrajPoints(R: LongInt; i: LongInt; LP: TAxisPoint);
 procedure ClearTrail(T: LongInt);
 function Copy(s: AnyString; iFrom: LongInt; iCount: LongInt): AnyString;
 function Cos(e: Extended): Extended;
 function CountAxisTrajPoints(R: LongInt; i: LongInt): LongInt;
 function CountAxisWayPoints(R: LongInt; i: LongInt): LongInt;
 procedure Dec(x);
 function Deg(angle: Double): Double;
 procedure DelAxisTrajPoint(R: LongInt; i: LongInt; idx: LongInt);
 procedure Delete(s: AnyString; ifrom: LongInt; icount: LongInt);
 procedure DelTrailNode(T: LongInt);
 function DiffAngle(a1: Double; a2: Double): Double;
 function Dist(x: Double; y: Double): Double;
 function ExceptionParam(): String;
 function ExceptionPos(): LongWord;
 function ExceptionProc(): LongWord;
 function ExceptionToString(er: TIFException; Param: String): String;
 function ExceptionType(): TIFException;
 function FloatToStr(e: Extended): String;
 function Format(sFormat: String; Args: !OPENARRAYOFCONST): String;
 function GetArrayLength(arr): LongInt;
 function GetAStarPathPoint(i: LongInt): TPoint;
 function GetAxisEnergy(R: LongInt; i: LongInt): Double;
 function GetAxisI(R: LongInt; i: LongInt): Double;
 function GetAxisIndex(R: LongInt; ID: String; i: LongInt): LongInt;
 function GetAxisOdo(R: LongInt; i: LongInt): LongInt;
 function GetAxisPos(R: LongInt; i: LongInt): Double;
 function GetAxisPosDeg(R: LongInt; i: LongInt): Double;
 function GetAxisPosRef(R: LongInt; i: LongInt): Double;
 function GetAxisPosRefDeg(R: LongInt; i: LongInt): Double;
 function GetAxisSpeed(R: LongInt; i: LongInt): Double;
 function GetAxisSpeedDeg(R: LongInt; i: LongInt): Double;
 function GetAxisSpeedRef(R: LongInt; i: LongInt): Double;
 function GetAxisSpeedRefDeg(R: LongInt; i: LongInt): Double;
 function GetAxisState(R: LongInt; i: LongInt): TAxisState;
 function GetAxisStateRef(R: LongInt; i: LongInt): TAxisState;
 function GetAxisTorque(R: LongInt; i: LongInt): Double;
 function GetAxisTrajPoint(R: LongInt; i: LongInt; idx: LongInt): TAxisPoint;
 function GetAxisTWPower(R: LongInt; i: LongInt): Double;
 function GetAxisU(R: LongInt; i: LongInt): Double;
 function GetAxisUIPower(R: LongInt; i: LongInt): Double;
 function GetAxisWayPoint(R: LongInt; i: LongInt; idx: LongInt): TAxisPoint;
 function GetBeltSpeed(R: LongInt; i: LongInt): Double;
 function GetFrictionDef(R: LongInt; i: LongInt): TFrictionDef;
 function GetMotorControllerPars(R: LongInt; i: LongInt): TMotorControllerPars;
 function GetRCValue(r: LongInt; c: LongInt): Double;
 function GetRobotPos2D(R: LongInt): TState2D;
 function GetRobotTheta(R: LongInt): Double;
 function GetRobotVel2D(R: LongInt): TState2D;
 function GetRobotVx(R: LongInt): Double;
 function GetRobotVy(R: LongInt): Double;
 function GetRobotW(R: LongInt): Double;
 function GetRobotX(R: LongInt): Double;
 function GetRobotY(R: LongInt): Double;
 function GetSensorVal(R: LongInt; i: LongInt): Double;
 function GetSolidCenterOfMass(R: LongInt; i: LongInt): TPoint3D;
 function GetSolidColor(R: LongInt; i: LongInt): TRGBAColor;
 function GetSolidIndex(R: LongInt; ID: String): LongInt;
 function GetSolidLinearVel(R: LongInt; i: LongInt): TPoint3D;
 function GetSolidMass(R: LongInt; i: LongInt): Double;
 function GetSolidPos(R: LongInt; i: LongInt): TPoint3D;
 function GetSolidTheta(R: LongInt; i: LongInt): Double;
 function GetSolidVx(R: LongInt; i: LongInt): Double;
 function GetSolidVy(R: LongInt; i: LongInt): Double;
 function GetSolidVz(R: LongInt; i: LongInt): Double;
 function GetSolidX(R: LongInt; i: LongInt): Double;
 function GetSolidY(R: LongInt; i: LongInt): Double;
 function GetSolidZ(R: LongInt; i: LongInt): Double;
 function GetThingColor(T: LongInt; c: LongInt): TRGBAColor;
 function GetThingIndex(ID: String): LongInt;
 function GetThingPos(T: LongInt): TPoint3D;
 function GetThingSize(T: LongInt): TPoint3D;
 function High(x): Int64;
 function IDispatchInvoke(Self: IDispatch; PropertySet: Boolean; Name: String; Par: !OPENARRAYOFVARIANT): Variant;
 procedure Inc(x);
 procedure Insert(s: AnyString; s2: AnyString; iPos: LongInt);
 function Int(e: Extended): Extended;
 function Int64ToStr(i: Int64): String;
 function IntToStr(i: Int64): String;
 function IsMotorActive(R: LongInt; i: LongInt): Boolean;
 function KeyPressed(k: LongInt): Boolean;
 function Length(s): LongInt;
 procedure LoadJointWayPoints(r: LongInt; JointPointsFileName: String);
 function Low(x): Int64;
 function Lowercase(s: AnyString): AnyString;
 function NormalizeAngle(ang: Double): Double;
 function Null(): Variant;
 function Padl(s: AnyString; I: LongInt): AnyString;
 function Padr(s: AnyString; I: LongInt): AnyString;
 function Padz(s: AnyString; I: LongInt): AnyString;
 function Pi(): Extended;
 function Pos(SubStr: AnyString; S: AnyString): LongInt;
 function Rad(angle: Double): Double;
 procedure RaiseException(Ex: TIFException; Param: String);
 procedure RaiseLastException();
 function RCButtonPressed(r: LongInt; c: LongInt): Boolean;
 function ReadComPort(): String;
 function ReadUDPData(): String;
 procedure RefreshSheets();
 function Replicate(c: Char; I: LongInt): String;
 procedure ResetAxisEnergy(R: LongInt; i: LongInt);
 function RotateAndTranslate(rx: Double; ry: Double; px: Double; py: Double; tx: Double; ty: Double; teta: Double): Double;
 function RotateAroundPoint(rx: Double; ry: Double; px: Double; py: Double; cx: Double; cy: Double; teta: Double): Double;
 function Round(e: Extended): LongInt;
 function Sat(a: Double; limit: Double): Double;
 procedure SaveJointWayPoints(r: LongInt; JointPointsFileName: String);
 procedure SetArrayLength(arr count: LongInt);
 procedure SetAxisPosRef(R: LongInt; i: LongInt; aPos: Double);
 procedure SetAxisSpeedRef(R: LongInt; i: LongInt; aSpeed: Double);
 procedure SetAxisSpring(R: LongInt; i: LongInt; k: Double; ZeroPos: Double);
 procedure SetAxisStateRef(R: LongInt; i: LongInt; aState: TAxisState);
 procedure SetAxisTorqueRef(R: LongInt; i: LongInt; aTorque: Double);
 procedure SetAxisTrajPoint(R: LongInt; i: LongInt; idx: LongInt; LP: TAxisPoint);
 procedure SetAxisVoltageRef(R: LongInt; i: LongInt; aVoltage: Double);
 procedure SetBeltSpeed(R: LongInt; i: LongInt; nSpeed: Double);
 procedure SetFirePosition(x: Double; y: Double; z: Double);
 procedure SetFrictionDef(R: LongInt; i: LongInt; nBv: Double; nFc: Double; nCoulombLimit: Double);
 procedure SetLength(s NewLength: LongInt);
 procedure SetMotorActive(R: LongInt; i: LongInt; nState: Boolean);
 procedure SetMotorControllerPars(R: LongInt; i: LongInt; nKi: Double; nKd: Double; nKp: Double; nKf: Double);
 procedure SetRCValue(r: LongInt; c: LongInt; s: String);
 procedure SetRobotPos(R: LongInt; x: Double; y: Double; z: Double; teta: Double);
 procedure SetSolidColor(R: LongInt; I: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 procedure SetThingColor(T: LongInt; c: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 procedure SetThingPos(T: LongInt; x: Double; y: Double; z: Double);
 procedure SetThingSize(T: LongInt; x: Double; y: Double; z: Double);
 procedure SetTrailColor(T: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 procedure SetupAStarMap(xi: LongInt; yi: LongInt; xt: LongInt; yt: LongInt; nEucliDistK: Double);
 function Sign(a: Double): Double;
 function Sin(e: Extended): Extended;
 function SizeOf(Data): LongInt;
 function Sqrt(e: Extended): Extended;
 procedure StartFire();
 procedure StartSolidFire(R: LongInt; I: LongInt);
 procedure StopFire();
 procedure StopSolidFire(R: LongInt; I: LongInt);
 function StrGet(S: String; I: LongInt): Char;
 function StrGet2(S: String; I: LongInt): Char;
 function StringOfChar(c: Char; I: LongInt): String;
 procedure StrSet(c: Char; I: LongInt; s: String);
 function StrToFloat(s: String): Extended;
 function StrToInt(s: String): LongInt;
 function StrToInt64(s: String): Int64;
 function StrToIntDef(s: String; def: LongInt): LongInt;
 function tan(x: Extended): Extended;
 function TranslateAndRotate(rx: Double; ry: Double; px: Double; py: Double; tx: Double; ty: Double; teta: Double): Double;
 function Trim(s: AnyString): AnyString;
 function Trunc(e: Extended): LongInt;
 function Unassigned(): Variant;
 function Uppercase(s: AnyString): AnyString;
 function VarIsEmpty(V: Variant): Boolean;
 function VarIsNull(V: Variant): Boolean;
 function VarType(V: Variant): Word;
 procedure WriteComPort(s: String);
 procedure WriteLn(S: String);
 procedure WriteUDPData(ToIP: String; ToPort: LongInt; s: String);
 function WStrGet(S: WideString; I: LongInt): WideChar;
 procedure WStrSet(c: WideChar; I: LongInt; s: WideString);
